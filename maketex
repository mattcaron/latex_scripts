#!/usr/bin/perl -w

# maketex
#
# Create a PDF document from a (reasonably) intelligently determined
# .tex file in the current directory.
#
# ----------------------------------------------------------------------------
# Copyright 2000 Jonathan Short
# Copyright 2001 Tim Toolan
# Copyright 2002 Matthew Caron
# Copyright 2010 SIXNET, LLC.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor,
# Boston, MA  02110-1301
# USA
# ----------------------------------------------------------------------------

use strict;
use Getopt::Long;
use Data::Dumper;

# Commands are presumed to be in your path. Otherwise, your computer
# is broken.

# FIXME - make these configurable too? (Why?)
my $latexToPDF = "xelatex";
my $makeindex = "makeindex";
my $rerunTest = "Rerun (LaTeX|to get cross-references right)";
my $rerunMax = 5;

# Makes html files
my $latexToHTML = "htlatex";

main();

##
# Print script usage.
#
sub usage
{
    print("usage: maketex [--output=<output>] [--help] [--noview] [--force] " .
          "[--viewer=<viewer] [filename]\n");
    print("  --output : output format. Must be one of: pdf html\n");
    print("           : If none specified, pdf is used\n");
    print("           : Note that pdf is the only one which invokes a " . 
          "viewer\n");
    print("  --help   : print usage and exit\n");
    print("  --noview : do not invoke a viewer\n");
    print("  --force  : force a display even if LaTeX errors\n");
    print("  --viewer=<command>: use <command> as a viewer " . 
          "(default: atril)\n");
}

##
# Determine if a file is a base tex file.
#
# This is as opposed to a supplementary file included by a meta file, etc.
#
# @param $texfile - the tex file to parse
#
# @return 1 if it is a base tex file
# @return 0 if it is not a base tex file
#
sub isbasetexfile($)
{
    my($texfile)=@_;

    if (!open(FILE,$texfile)) {
        return(0);
    }

    my($line);
    while (<FILE>) {
        $line=$_;
        $line =~ s/[\r\n]//g;
        $line =~ s/\%.*//;
        $line =~ s/^\s+//;

        if ($line eq "") {
            next;
        }

        close(FILE);
        if ($line =~ /^\\document/) {
            return(1);
        } 
        else {
            return(0);
        }
    }

}

##
# Parse command line arguments and determine the base filename of the
# tex file to use. If one is specified, use that, otherwise
# look for one that has a .tex extension and begins with \document
#
# @return base name of file (without .tex extension) if found
# @return undef if not
#
# @note This expects $ARGV[0] to contain the file name. If the command
# line arguments have been parsed, it will, assuming it was given. If
# not, this will search the current directory for a .tex file.
#
sub findfile()
{
    my $texFileName=$ARGV[0];
    my $baseFileName;

    if (defined($texFileName)) {
        # Allow lazy users to not have to put .tex at the end
        # (undocumented easter egg)
        if ($texFileName !~ /^[^\#]+\.tex$/) {
            $texFileName = $texFileName . ".tex";
        }
        # Simple existence check
        if (! -e $texFileName) {
            print("File \"${texFileName}\" not found, exiting.\n");
            $texFileName = undef;
        }
    } 
    else {
        # Semi-intelligently try to find it...
        my @goodTexFiles;
        my @lsarray= <*>;
        my @texFiles=grep(/^[^\#]+\.tex$/,@lsarray);
        
        for (my $i=0; $i<scalar(@texFiles); $i++) {
            if (isbasetexfile($texFiles[$i])) {
                push(@goodTexFiles,$texFiles[$i]);
            }
        }

        if (scalar(@goodTexFiles) == 0) {
            print("No file beginning with \\document and a \".tex\" " . 
                  "extension found, exiting.\n");
        } 
        else {
            if (scalar(@goodTexFiles) > 1) {
                print("Warning: " .
                      "More than one good \".tex\" file found in directory.\n");
            }
            $texFileName=$goodTexFiles[0];
        }
    }

    if (defined($texFileName)) {
        $baseFileName = $texFileName;
        $baseFileName =~ s/\.tex$//;
    }

    return $baseFileName;
}

##
# Main function.
#
sub main
{
    my ($help, $force) = 0;
    my ($view) = 1;
    my $viewer = "atril";
    my $output = "pdf";
    
    my $result = GetOptions ("output=s"=> \$output,
                             "help"  => \$help,
                             "view!" => \$view,
                             "force" => \$force,
                             "viewer=s" => \$viewer);
    
    if (!$result) {
        usage();
        print("Failed to parse command line arguments.\n");
        exit(1);
    }

    if ($output ne "pdf"){
        $view = 0;
    }

    # At this point, all arguments parsed out by GetOptions should
    # have been removed from ARGV, so all that is left is the optional
    # filename.
    my $file = findfile();

    if (!defined($file)) {
        # It's already printed out an error message
        exit(1);
    } 
    else {

        print("Using ${file}.tex.\n");
    
        if ($output eq "html") {
            # htlatex seems to rerun as many times as necessary, so we
            # don't need any complicated logic here, and we don't
            # invoke a viewer.
            my $command = "${latexToHTML} ${file}.tex";
            
            if (system("${command}") && !$force) {
                die("\nAborting because ${command} failed.\n");
            }

        }
        else {
            
            my $command = "${latexToPDF} ${file}.tex";
            
            # we need to run LaTeX, then make the index, then run it until
            # it doesn't have any more cross-references to get right.
            
            if (system("${command}") && !$force) {
                die("\nAborting because ${command} failed.\n");
            }
            
            # Only run makeindex if someone generated it.
            if (-f "${file}.idx") {
                if (system("${makeindex} ${file}.idx") && $force) {
                    die("\nAborting because ${makeindex} ${file}.idx " . 
                        "failed.\n");
                }
            }
            
            my $rerunCount = 0;
            my $needsRerun = 1;
            
            while ($needsRerun && $rerunCount < $rerunMax) {
                $needsRerun = 0;
                ++$rerunCount;
                
                my $out;
                
                open($out, "-|", "${command}") || 
                  die("Unable to execute ${command}");
                
                while (my $line = <$out>) {
                    if ($line =~ /$rerunTest/) {
                        $needsRerun = 1;
                    }
                }
                # Per the Perl docs:
                # Closing any piped filehandle causes the parent
                # process to wait for the child to finish, and returns
                # the status value in $?
                close($out);
                
                if ($? && !$force) {
                    die("\nAborting because LaTeX failed.\n");
                }
            }
            
            if ($rerunCount == $rerunMax) {
                print("WARNING: ran latex ${rerunCount} times, giving up\n");
            }
            
            # Note - this will open multiple versions of some
            # readers. However, sufficiently smart ones (like evince) just
            # refresh the file.
            if ($view) {
                system("${viewer} ${file}.pdf &");
            }
        }
        
    }
    exit(0);
}
